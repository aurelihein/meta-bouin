From 6992e8829671a48f9b0d041a5668361d14691dbd Mon Sep 17 00:00:00 2001
From: Miguel Gomez <magomez@igalia.com>
Date: Thu, 2 Apr 2020 14:19:27 +0200
Subject: [PATCH] [holepunch] Add GStreamer holepunch platform depent bits

---
 .../gstreamer/MediaPlayerPrivateGStreamer.cpp | 39 +++++++++++++++++--
 Source/cmake/GStreamerDefinitions.cmake       |  1 +
 Source/cmake/GStreamerDependencies.cmake      |  1 +
 Source/cmake/OptionsWPE.cmake                 |  6 +++
 4 files changed, 43 insertions(+), 4 deletions(-)

diff --git a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
index 4efbe44a15a6..95366b85481d 100644
--- a/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
+++ b/Source/WebCore/platform/graphics/gstreamer/MediaPlayerPrivateGStreamer.cpp
@@ -2143,6 +2143,16 @@ void MediaPlayerPrivateGStreamer::handleMessage(GstMessage* message)
             gst_element_state_get_name(currentState), '_', gst_element_state_get_name(newState)).utf8();
         GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS(GST_BIN(m_pipeline.get()), GST_DEBUG_GRAPH_SHOW_ALL, dotFileName.data());
 
+#if USE(GSTREAMER_HOLEPUNCH)
+        if (currentState == GST_STATE_NULL && newState == GST_STATE_READY) {
+            // If we didn't create a video sink, store a reference to the created one.
+            if (!m_videoSink)
+                g_object_get(m_pipeline.get(), "video-sink", &m_videoSink.outPtr(), nullptr);
+
+            // Ensure that there's a buffer with the transparent rectangle available when playback is going to start.
+            pushNextHolePunchBuffer();
+        }
+#endif
         break;
     }
     case GST_MESSAGE_BUFFERING:
@@ -3096,9 +3106,11 @@ void MediaPlayerPrivateGStreamer::createGSTPlayBin(const URL& url, const String&
             GST_WARNING("The videoflip element is missing, video rotation support is now disabled. Please check your gst-plugins-good installation.");
     }
 
+#if !USE(GSTREAMER_HOLEPUNCH)
     GRefPtr<GstPad> videoSinkPad = adoptGRef(gst_element_get_static_pad(m_videoSink.get(), "sink"));
     if (videoSinkPad)
         g_signal_connect_swapped(videoSinkPad.get(), "notify::caps", G_CALLBACK(videoSinkCapsChangedCallback), this);
+#endif
 }
 
 bool MediaPlayerPrivateGStreamer::didPassCORSAccessCheck() const
@@ -3573,9 +3585,16 @@ GstElement* MediaPlayerPrivateGStreamer::createVideoSinkGL()
 #if USE(GSTREAMER_HOLEPUNCH)
 static void setRectangleToVideoSink(GstElement* videoSink, const IntRect& rect)
 {
-    // Here goes the platform-dependant code to set to the videoSink the size
-    // and position of the video rendering window. Mark them unused as default.
-    UNUSED_PARAM(videoSink);
+    if (!videoSink)
+        return;
+
+#if USE(WESTEROS_SINK) || USE(WPEWEBKIT_PLATFORM_BCM_NEXUS)
+    // Valid for brcmvideosink and westerossink.
+    GUniquePtr<gchar> rectString(g_strdup_printf("%d,%d,%d,%d", rect.x(), rect.y(), rect.width(), rect.height()));
+    g_object_set(videoSink, "rectangle", rectString.get(), nullptr);
+    return;
+#endif
+
     UNUSED_PARAM(rect);
 }
 
@@ -3591,9 +3610,21 @@ GstElement* MediaPlayerPrivateGStreamer::createHolePunchVideoSink()
 {
     // Here goes the platform-dependant code to create the videoSink. As a default
     // we use a fakeVideoSink so nothing is drawn to the page.
-    GstElement* videoSink =  gst_element_factory_make("fakevideosink", nullptr);
 
+#if USE(WESTEROS_SINK)
+    // Westeros using holepunch.
+    GRefPtr<GstElementFactory> westerosfactory = adoptGRef(gst_element_factory_find("westerossink"));
+    GstElement* videoSink = gst_element_factory_create(westerosfactory.get(), "WesterosVideoSink");
+    g_object_set(G_OBJECT(videoSink), "zorder", 0.0f, nullptr);
     return videoSink;
+#endif
+
+#if USE(WPEWEBKIT_PLATFORM_BCM_NEXUS)
+    // Nexus boxes use autovideosink.
+    return nullptr;
+#endif
+
+    return gst_element_factory_make("fakevideosink", nullptr);
 }
 
 void MediaPlayerPrivateGStreamer::pushNextHolePunchBuffer()
diff --git a/Source/cmake/GStreamerDefinitions.cmake b/Source/cmake/GStreamerDefinitions.cmake
index 474e31b8ba77..3af4b3a94005 100644
--- a/Source/cmake/GStreamerDefinitions.cmake
+++ b/Source/cmake/GStreamerDefinitions.cmake
@@ -6,3 +6,4 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_MEDIA_SOURCE PUBLIC ON)
 WEBKIT_OPTION_DEFINE(USE_GSTREAMER_GL "Whether to enable support for GStreamer GL" PRIVATE ON)
 WEBKIT_OPTION_DEFINE(USE_GSTREAMER_MPEGTS "Whether to enable support for MPEG-TS" PRIVATE OFF)
 WEBKIT_OPTION_DEFINE(USE_WPE_VIDEO_PLANE_DISPLAY_DMABUF "Whether to enable support for client-side video rendering" PRIVATE OFF)
+WEBKIT_OPTION_DEFINE(USE_WESTEROS_SINK "Westeros-Sink to be used as video-sink for GStreamer video player" PUBLIC OFF)
\ No newline at end of file
diff --git a/Source/cmake/GStreamerDependencies.cmake b/Source/cmake/GStreamerDependencies.cmake
index a3ce4bb75a9e..c791d7f85ce0 100644
--- a/Source/cmake/GStreamerDependencies.cmake
+++ b/Source/cmake/GStreamerDependencies.cmake
@@ -3,4 +3,5 @@ if (PORT STREQUAL "GTK")
 endif ()
 WEBKIT_OPTION_DEPEND(USE_GSTREAMER_GL ENABLE_VIDEO)
 WEBKIT_OPTION_DEPEND(USE_GSTREAMER_MPEGTS ENABLE_VIDEO)
+WEBKIT_OPTION_DEPEND(USE_WESTEROS_SINK ENABLE_VIDEO)
 WEBKIT_OPTION_DEPEND(USE_WPE_VIDEO_PLANE_DISPLAY_DMABUF USE_GSTREAMER_GL)
diff --git a/Source/cmake/OptionsWPE.cmake b/Source/cmake/OptionsWPE.cmake
index 6a48a8307fb4..5d5a68ff5ab2 100644
--- a/Source/cmake/OptionsWPE.cmake
+++ b/Source/cmake/OptionsWPE.cmake
@@ -44,6 +44,12 @@ WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEBDRIVER PUBLIC ON)
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_WEB_CRYPTO PUBLIC ON)
 WEBKIT_OPTION_DEFAULT_PORT_VALUE(ENABLE_XSLT PUBLIC ON)
 
+# Supported platforms.
+WEBKIT_OPTION_DEFINE(USE_WPEWEBKIT_PLATFORM_WESTEROS "Whether to enable support for the Westeros platform" PUBLIC OFF)
+WEBKIT_OPTION_DEFINE(USE_WPEWEBKIT_PLATFORM_BCM_NEXUS "Whether to enable support for the Broadcom Nexus platform" PUBLIC OFF)
+WEBKIT_OPTION_DEFINE(USE_WPEWEBKIT_PLATFORM_INTEL_CE "Whether to enable support for the Intel CE" PUBLIC OFF)
+WEBKIT_OPTION_DEFINE(USE_WPEWEBKIT_PLATFORM_RPI "Whether to enable support for the raspberry pi" PUBLIC OFF)
+
 # Private options shared with other WebKit ports. Add options here only if
 # we need a value different from the default defined in WebKitFeatures.cmake.
 # Changing these options is completely unsupported.
